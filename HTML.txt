<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <title>空間設計導覽文案小幫手</title>
  <style>
    body { font-family: sans-serif; background-color: #fffbea; padding: 20px; }
    .card { background: #fff8e1; padding: 20px; border-radius: 12px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); }
    label { font-weight: bold; }
    input, select, textarea { width: 100%; padding: 8px; margin: 5px 0 15px 0; border-radius: 6px; border: 1px solid #ccc; }
    button { background-color: #ffcc80; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; margin-right: 10px; }
    button:hover { background-color: #ffb74d; }
    img { max-width: 100%; margin-top: 10px; }
    .preview-block { background: #fff3e0; padding: 10px; margin-top: 10px; border-radius: 6px; white-space: pre-wrap; }
  </style>
</head>
<body>
  <div class="card">
    <h2>🏠 空間設計導覽文案小幫手</h2>

    <label>📷 上傳2D平面圖（JPG / PNG）</label>
    <input type="file" id="floorplan" accept="image/png, image/jpeg" onchange="previewImage(event)">
    <img id="preview" style="max-height: 300px; object-fit: contain;" />

    <label>📐 總坪數（可選填）</label>
    <input type="number" id="total_area" placeholder="例如：18.5">

    <label>🎨 設計風格</label>
    <select id="style" onchange="updateStyleInfo(this.value)">
      <option value="">請選擇風格</option>
      <option value="北歐風">北歐風</option><option value="日式禪風">日式禪風</option><option value="工業風">工業風</option>
      <option value="簡約風">簡約風</option><option value="混搭風">混搭風</option><option value="現代風">現代風</option>
      <option value="鄉村風">鄉村風</option><option value="古典風">古典風</option><option value="新古典風">新古典風</option>
      <option value="美式風">美式風</option><option value="地中海風">地中海風</option><option value="日式無印風">日式無印風</option>
      <option value="日式侘寂風">日式侘寂風</option>
    </select>
    <div id="style_feature" class="preview-block">風格特色：請選擇設計風格</div>

    <label>👨‍👩‍👧 居住成員</label>
    <input id="member" placeholder="例如：夫妻＋國小女兒＋灰貓">

    <label>💼 職業</label>
    <input id="job" placeholder="例如：夫妻皆為公務員">

    <label>🎯 興趣與生活習慣</label>
    <input id="hobby" placeholder="例如：打羽毛球、看影集、收藏公仔">

    <label>📦 空間主要需求</label>
    <input id="need" placeholder="例如：大量收納、寵物共居、閱讀空間">
    <button onclick="analyzeFurniture()">📊 分析空間與家具配置</button>

    <p id="status"></p>
    <div id="furniturePreview" class="preview-block"></div>
        
    <label>✏️ 家具配置修正（可補充／修正原始辨識）</label>
    <textarea id="furniture_correction" rows="6" placeholder="例如：主臥增加床頭櫃2個，客廳原本沙發辨識錯誤為書櫃" style="width:100%; margin-top:5px;"></textarea>
    <div style="background:#fff3e0; padding:8px 12px; margin-top:5px; font-size: 13px; line-height: 1.6; border-radius: 6px; color:#333;">
      例如：主臥室增加床頭櫃2個，客廳刪除茶几，書房坪數改為3.2，餐廳清空家具，新增陽台 1.5坪，家具：洗衣機、曬衣架，主臥室將床頭櫃改為床頭櫃3個，主臥室改名為夫妻房，刪除多功能房
      <br><span style="font-size: 12px; color: #777;">每句請用頓號、逗號或換行分隔後點擊「🔁 更新家具配置預覽」按鈕</span>
    </div>

    <button onclick="applyFurnitureCorrection()">🔁 更新家具配置預覽</button>
    <button onclick="submitForm()">📝 產出導覽文案</button>
    <div id="docPreview" class="preview-block">📝 文案預覽區將顯示於此</div>
    <button id="downloadWord" onclick="downloadWordDoc()" style="display:none;">📄 下載 Word 文案</button>
  </div>

  <script>
    const styleFeatureMap = {
      "北歐風": "清新自然簡約", "日式禪風": "靜謐留白禪意", "工業風": "粗獷水泥金屬",
      "簡約風": "線條清爽實用", "混搭風": "異材自由組合", "現代風": "俐落科技質感",
      "鄉村風": "溫馨自然木質", "古典風": "對稱雕飾層次", "新古典風": "優雅現代融合",
      "美式風": "舒適大器居家", "地中海風": "藍白拱門曲線", "日式無印風": "樸素溫潤木色",
      "日式侘寂風": "灰調留白時間感"
    };

    function updateStyleInfo(style) {
      document.getElementById("style_feature").textContent = "風格特色：" + (styleFeatureMap[style] || "請選擇設計風格");
    }

    function previewImage(event) {
      const reader = new FileReader();
      reader.onload = function(){
        document.getElementById("preview").src = reader.result;
      };
      reader.readAsDataURL(event.target.files[0]);
    }

    async function analyzeFurniture() {
      const fileInput = document.getElementById("floorplan");
      const status = document.getElementById("status");
      const furniturePreview = document.getElementById("furniturePreview");

      if (!fileInput.files.length) {
        status.textContent = "請先上傳圖面";
        return;
      }

      status.textContent = "📤 正在分析圖面...";
      const formData = new FormData();
      formData.append("file", fileInput.files[0]);

      const parseRes = await fetch("https://interior-indoortour-ai.onrender.com/api/parse_floorplan", { method: "POST", body: formData });
      const parsed = await parseRes.json();
      window.latestParsedFurniture = parsed.spaces;

      if (parsed.spaces && parsed.spaces.length > 0) {
        renderFurnitureTable(parsed.spaces);
      } else {
        furniturePreview.innerText = "❌ 無法辨識空間與家具配置";
      }
      status.textContent = "✅ 分析完成，請繼續產出導覽文案。";
    }

    async function submitForm() {
      const fileInput = document.getElementById("floorplan");
      const totalArea = document.getElementById("total_area").value;
      const style = document.getElementById("style").value;
      const owner_info = 
        "居住成員：" + document.getElementById("member").value + "\n" +
        "職業：" + document.getElementById("job").value + "\n" +
        "興趣：" + document.getElementById("hobby").value + "\n" +
        "需求：" + document.getElementById("need").value;
      const status = document.getElementById("status");

      if (!fileInput.files.length) {
        status.textContent = "請上傳圖面";
        return;
      }

      status.textContent = "🧠 正在產出文案...";

      // **關鍵修正**：不論有無修正，都直接取最新的配置
      const data = {
        total_area: totalArea,
        style: style,
        owner_info: owner_info,
        furniture_layout: window.latestParsedFurniture,
        image_filename: fileInput.files[0].name
      };

      const genRes = await fetch("https://interior-indoortour-ai.onrender.com/api/generate_design_narrative", {
        method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data)
      });
      const genData = await genRes.json();

      window.generatedDocPayload = { ...genData, image_filename: fileInput.files[0].name };
      document.getElementById("downloadWord").style.display = "inline-block";

      let previewText = "";
      if (genData.concept) previewText += genData.concept + "\n\n";
      if (Array.isArray(genData.sections)) {
        previewText += genData.sections.map(s => {
          if (s.room) {
            // Word格式
            return "【" + s.room + "】\n" +
              "坪數：" + (s.area || "") + "\n" +
              "功能：" + (s.function || "") + "\n" +
              "傢俱配置：" + (Array.isArray(s.furniture) ? s.furniture.join("、") : s.furniture || "") + "\n" +
              "色彩搭配：" + (s.color || "") + "\n" +
              "設計重點：" + (s.design_note || "") + "\n" +
              "情感描述：" + (s.emotion || "");
          } else if (s.title && s.text) {
            // 舊格式
            return "【" + s.title + "】\n" + s.text;
          }
          return "";
        }).join("\n\n") + "\n\n";
      }
      if (genData.conclusion) previewText += genData.conclusion;
      if (genData.error) {
        document.getElementById("docPreview").innerText = "❌ 錯誤：" + genData.error;
        return;
      }
      if (!previewText && genData.content) {
        previewText = genData.content;
      }
      document.getElementById("docPreview").innerText = previewText || "❌ 文案產出失敗或格式錯誤";
      status.textContent = "✅ 已下載 Word 文案完成！";
    }

    async function downloadWordDoc() {
      const docRes = await fetch("https://interior-indoortour-ai.onrender.com/api/download_word_docx", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(window.generatedDocPayload)
      });
      const blob = await docRes.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "空間設計導覽文案.docx";
      a.click();
    }

    function renderFurnitureTable(spaces) {
      let tableHtml = "<h3>📋 家具配置預覽</h3><table border='1' cellpadding='6' style='border-collapse:collapse; width:100%; text-align:left;'><thead><tr><th>空間名稱</th><th>坪數</th><th>主要家具配置</th></tr></thead><tbody>";
      spaces.forEach(space => {
        const furnitureList = Array.isArray(space.furniture) ? space.furniture.join("、") : "";
        tableHtml += `<tr><td>${space.name}</td><td>${space.area}</td><td>${furnitureList}</td></tr>`;
      });
      tableHtml += "</tbody></table>";
      document.getElementById("furniturePreview").innerHTML = tableHtml;
    }

    function applyFurnitureCorrection() {
      const correctionText = document.getElementById("furniture_correction").value.trim();
      if (!window.latestParsedFurniture || !correctionText) return;

      const updates = correctionText.split("，");
      updates.forEach(update => {
        let space;
        let renameRoom = update.match(/(.+?)改名為(.+)/);
        if (renameRoom) {
          const from = renameRoom[1].trim();
          const to = renameRoom[2].trim();
          space = window.latestParsedFurniture.find(s => s.name === from);
          if (space) space.name = to;
          return;
        }
        let addRoom = update.match(/新增(.+?)\s*([\d.]+)坪，家具[:：](.+)/);
        if (addRoom) {
          const name = addRoom[1].trim();
          const area = parseFloat(addRoom[2]);
          const furnitureList = addRoom[3].split("、").map(f => f.trim());
          window.latestParsedFurniture.push({ name, area, furniture: furnitureList });
          return;
        }
        let delRoom = update.match(/刪除(.+?)/);
        if (delRoom) {
          const name = delRoom[1].trim();
          window.latestParsedFurniture = window.latestParsedFurniture.filter(s => s.name !== name);
          return;
        }
        let renameFurniture = update.match(/(.+?)將(.+?)改為(.+)/);
        if (renameFurniture) {
          const room = renameFurniture[1].trim();
          const from = renameFurniture[2].trim();
          const to = renameFurniture[3].trim();
          space = window.latestParsedFurniture.find(s => s.name === room);
          if (space) {
            const idx = space.furniture.findIndex(f => f.includes(from));
            if (idx !== -1) space.furniture[idx] = to;
          }
          return;
        }
        let addMatch = update.match(/(.+?)增加(.+)/);
        if (addMatch) {
          const roomName = addMatch[1].trim();
          const item = addMatch[2].trim();
          space = window.latestParsedFurniture.find(s => s.name === roomName);
          if (space) space.furniture.push(item);
          return;
        }
        let delMatch = update.match(/(.+?)刪除(.+)/);
        if (delMatch) {
          const roomName = delMatch[1].trim();
          const item = delMatch[2].trim();
          space = window.latestParsedFurniture.find(s => s.name === roomName);
          if (space) space.furniture = space.furniture.filter(f => !f.includes(item));
          return;
        }
        let areaMatch = update.match(/(.+?)坪數改為([\d.]+)/);
        if (areaMatch) {
          const roomName = areaMatch[1].trim();
          const newArea = parseFloat(areaMatch[2]);
          space = window.latestParsedFurniture.find(s => s.name === roomName);
          if (space && !isNaN(newArea)) space.area = newArea;
          return;
        }
        let clearMatch = update.match(/(.+?)清空家具/);
        if (clearMatch) {
          const roomName = clearMatch[1].trim();
          space = window.latestParsedFurniture.find(s => s.name === roomName);
          if (space) space.furniture = [];
          return;
        }
      });

      renderFurnitureTable(window.latestParsedFurniture);
    }
  </script>
</body>
</html>